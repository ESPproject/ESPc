use std_mathLib                 (by default usr/include/esp)
use dir::subdir::e
use lib
---------------------------------------------------------------

//===-------------
// Comments
//===-------------

// up to \n
/* up to */

//===-------------

Returns several variables storing them into anonymous structure:
EXAMPLE:
struct stusr {
    int 
    int
}
func [int, int] name(params(, params)*) {

    ret [2, a];
}
stusr a = name()
-----------------------------------

func int name(params(, params)*) {

    ret (4, a);
}


EXAMPLE:

func int add(int a, int b) {
    int c = a + b;
    ret c;
    -------------------------
    ret a + b;
}
-----------------------------------
Cycles

loop {

}

for(let/int i = ...; i < | > | <= | >= | != | '||' | '&&'; i++, i+=..., i=i+..., ++i)
while(condition)

-----------------------------------
Variables:

let a = 2;
int b; =-12158125901      // Stored some trash in b;

typedef int a;
a b = 2;


Types:
1. int
2. float
3. double
4. char
5. bool
6. pointers


Structs:
6. string
7. vector -> quick_sort(if int) -> methods?
-----------------------------------
Keywords:
let int = 2;
tableOfTypes = [let, int, float, double, string, char, bool, vector, a, byte...]
for, while, loop
main??
ret
use, struct, func, typedef
-----------------------------------
Optimization:

Loop unrolling
Obvious branching

--Error (превращает warning-и в error-ы )

лексика
синтаксис -> AST
семантика -> TS
OPT -> AST

Loop unrolling



Obvious branching


ptr p = b;
ptr pa = a;

a = 3 ->  
...
if(a == 3) --> x -> a не изменяется
{          --> x
    ...
}          --> x
